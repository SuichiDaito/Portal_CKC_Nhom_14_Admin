// services/admin_service.dart
import 'package:chopper/chopper.dart';
import 'package:portal_ckc/api/model/admin_thong_tin.dart';

part 'admin_service.chopper.dart';

@ChopperApi(baseUrl: '/admin')
abstract class AdminService extends ChopperService {
  static AdminService create([ChopperClient? client]) => _$AdminService(client);

  //API LOGIN
  @Post(path: '/login')
  Future<Response<Map<String, dynamic>>> login(
    @Body() Map<String, dynamic> body,
  );

  //API L·∫§Y TH√îNG TIN GI·∫¢NG VI√äN THEO ID
  @Get(path: '/giangvien/{id}')
  Future<Response> getUserDetail(@Path('id') int id);

  // ‚úÖ API ƒê·ªïi m·∫≠t kh·∫©u cho gi·∫£ng vi√™n
  @Put(path: '/doi-mat-khau')
  Future<Response<Map<String, dynamic>>> changePassword(
    @Body() Map<String, dynamic> body,
  );

  //=================PH√íNG=============
  //API L·∫§Y DANH S√ÅCH PH√íNG
  @Get(path: '/phong')
  Future<Response<Map<String, dynamic>>> getRooms();

  @Post(path: '/phong')
  Future<Response<Map<String, dynamic>>> createRoom(
    @Body() Map<String, dynamic> body,
  );

  @Put(path: '/phong/{id}')
  Future<Response<Map<String, dynamic>>> updateRoom(
    @Path('id') int id,
    @Body() Map<String, dynamic> body,
  );

  @Get(path: '/phong/{id}')
  Future<Response<Map<String, dynamic>>> getRoomDetail(@Path('id') int id);

  //=================L·ªöP CH·ª¶ NHI·ªÜM==================

  //API L·∫§Y DANH S√ÅCH L·ªöP CH·ª¶ NHI·ªÜM
  @Get(path: '/lop-chu-nhiem')
  Future<Response<Map<String, dynamic>>> getLopList();

  //API L·∫§Y DANH S√ÅCH SINH VI√äN L·ªöP CH·ª¶ NHI·ªÜM THEO IDL·ªöP
  @Get(path: '/lop-chu-nhiem/sinhvien/{id}')
  Future<Response<Map<String, dynamic>>> getStudentsByClassId(
    @Path('id') int lopId,
  );

  //API L·∫§Y DANH S√ÅCH T·∫§T C·∫¢ SINH VI√äN
  @Get(path: '/students')
  Future<Response<Map<String, dynamic>>> getAllSinhViens();

  //API L·∫§Y DANH S√ÅCH L·ªöP H·ªåC
  @Get(path: "/lopsinhvien")
  Future<Response> getDanhSachLop();

  //API L·∫§Y DANH S√ÅCH SINH VI√äN THEO L·ªöP
  @Get(path: '/lopsinhvien/{id}')
  Future<Response<Map<String, dynamic>>> getLopChiTiet(@Path('id') int lopId);

  //API L·∫§Y DANH S√ÅCH NI√äN KH√ìA-H·ªåC K·ª≤
  @Get(path: '/nien-khoa')
  Future<Response<Map<String, dynamic>>> fetchNienKhoaHocKy();

  //API L·∫§Y DANH S√ÅCH T·∫§T C·∫¢ GI·∫¢NG VI√äN
  @Get(path: '/giangvien')
  Future<Response> getAllUsers();

  //API L·∫§Y ƒêI·ªÇM R√àN LUY·ªÜN THEO ID LOP V√Ä TH·ªúI GIAN
  @Get(path: '/lop-chu-nhiem/nhap-diem-rl/{id}')
  Future<Response> fetchDiemRenLuyen(
    @Path('id') int idLop,
    @Query('thoi_gian') int thoiGian,
    // @Query('nam') int nam,
  );

  //API L·∫§Y DANH S√ÅCH NG√ÄNH H·ªåC, KHOA
  @Get(path: '/nganh-hoc')
  Future<Response> getDanhSachNganhHoc();

  //API L·∫§Y DANH S√ÅCH B·ªò M√îN
  @Get(path: '/bo-mon')
  Future<Response> getDanhSachBoMon();

  //API L·∫§Y DANH S√ÅCH vai tr√≤
  @Get(path: '/roles')
  Future<Response> getDanhSachVaiTro();

  //=================GI·∫§Y X√ÅC NH·∫¨N====================
  //API L·∫§Y DANH S√ÅCH GI·∫§Y X√ÅC NH·∫¨N
  @Get(path: '/giay-xac-nhan')
  Future<Response> getDanhSachGiayXacNhan();

  // PUT: X√°c nh·∫≠n h√†ng lo·∫°t gi·∫•y x√°c nh·∫≠n
  @Put(path: '/giay-xac-nhan')
  Future<Response> confirmMultipleGiayXacNhan(
    @Body() Map<String, dynamic> body,
  );

  //==============L·ªöP H·ªåC PH·∫¶N=====================

  //L·∫§Y DANH S√ÅCH L·ªöP H·ªåC PH·∫¶N C·ª¶A GV HI·ªÜN T·∫†I
  @Get(path: '/diem-mon-hoc')
  Future<Response<Map<String, dynamic>>> getLopHocPhanList();

  // L·∫§Y DANH S√ÅCH SINH VI√äN TRONG L·ªöP H·ªåC PH·∫¶N K√àM ƒêI·ªÇM
  @Get(path: '/diem-mon-hoc/{id}')
  Future<Response<Map<String, dynamic>>> getDanhSachSinhVienLopHocPhan(
    @Path('id') int idLopHocPhan,
  );

  // API C·∫¨P NH·∫¨T ƒêI·ªÇM M√îN H·ªåC CHO L·ªöP H·ªåC PH·∫¶N
  @Post(path: '/diem-mon-hoc/cap-nhat')
  Future<Response<Map<String, dynamic>>> capNhatDiemMonHoc(
    @Body() Map<String, dynamic> body,
  );
  // ================== üîî TH√îNG B√ÅO ==================

  // L·∫•y danh s√°ch t·∫•t c·∫£ th√¥ng b√°o
  @Get(path: '/thongbao')
  Future<Response<Map<String, dynamic>>> getThongBaoList();

  // L·∫•y chi ti·∫øt 1 th√¥ng b√°o
  @Get(path: '/thongbao/{id}')
  Future<Response<Map<String, dynamic>>> getThongBaoDetail(@Path('id') int id);

  // T·∫°o m·ªõi th√¥ng b√°o
  @Post(path: '/thongbao')
  Future<Response<Map<String, dynamic>>> createThongBao(
    @Body() Map<String, dynamic> body,
  );

  // C·∫≠p nh·∫≠t th√¥ng b√°o
  @Put(path: '/thongbao/{id}')
  Future<Response<Map<String, dynamic>>> updateThongBao(
    @Path('id') int id,
    @Body() Map<String, dynamic> body,
  );

  // Xo√° th√¥ng b√°o
  @Delete(path: '/thongbao/{id}')
  Future<Response> deleteThongBao(@Path('id') int id);

  // G·ª≠i th√¥ng b√°o t·ªõi sinh vi√™n (theo danh s√°ch l·ªõp)
  @Post(path: '/thongbao/send-to-student/{id}')
  Future<Response<Map<String, dynamic>>> sendThongBaoToStudents(
    @Path('id') int id,
    @Body() Map<String, dynamic> body,
  );

  // Xo√° file ƒë√≠nh k√®m trong th√¥ng b√°o
  @Delete(path: '/thongbao/file/{id}')
  Future<Response> deleteFileInThongBao(@Path('id') int id);

  // L·∫•y danh s√°ch gi√° tr·ªã enum c·∫•p tr√™n
  @Get(path: '/thongbao/get-data-cap-tren')
  Future<Response<Map<String, dynamic>>> getCapTrenOptions();

  //========================PHI·∫æU L√äN L·ªöP==============
  @Post(path: '/phieu-len-lop/store')
  Future<Response> storePhieuLenLop(@Body() Map<String, dynamic> body);

  @Get(path: '/phieu-len-lop/all')
  Future<Response> getPhieuLenLopAll();
}
