
// services/admin_service.dart
import 'package:chopper/chopper.dart';
import 'package:portal_ckc/api/model/admin_thong_tin.dart';
import 'package:http/http.dart' show MultipartFile;

part 'admin_service.chopper.dart';

@ChopperApi(baseUrl: '/admin')
abstract class AdminService extends ChopperService {
  static AdminService create([ChopperClient? client]) => _$AdminService(client);
  // API Qu√™n m·∫≠t kh·∫©u
  @Post(path: '/lay-lai-mat-khau')
  Future<Response<Map<String, dynamic>>> resetPassword(
    @Body() Map<String, dynamic> body,
  );

  //API LOGIN
  @Post(path: '/login')
  Future<Response<Map<String, dynamic>>> login(
    @Body() Map<String, dynamic> body,
  );

  //API L·∫§Y TH√îNG TIN GI·∫¢NG VI√äN THEO ID
  @Get(path: '/giangvien/{id}')
  Future<Response> getUserDetail(@Path('id') int id);

  //API ƒê·ªïi m·∫≠t kh·∫©u cho gi·∫£ng vi√™n
  @Post(path: '/doi-mat-khau')
  Future<Response<Map<String, dynamic>>> changePassword(
    @Body() Map<String, dynamic> body,
  );
  //API ƒë·ªïi ch·ª©c v·ª• gi·∫£ng vi√™n
  @Put(path: '/users/{id}/role')
  Future<Response<Map<String, dynamic>>> updateTeacherRole(
    @Path('id') int userId,
    @Body() Map<String, dynamic> data,
  );
  //=================PH√íNG=============
  //API L·∫§Y DANH S√ÅCH PH√íNG
  @Get(path: '/phong')
  Future<Response<Map<String, dynamic>>> getRooms();

  @Post(path: '/phong')
  Future<Response<Map<String, dynamic>>> createRoom(
    @Body() Map<String, dynamic> body,
  );

  @Put(path: '/phong/{id}')
  Future<Response<Map<String, dynamic>>> updateRoom(
    @Path('id') int id,
    @Body() Map<String, dynamic> body,
  );

  @Get(path: '/phong/{id}')
  Future<Response<Map<String, dynamic>>> getRoomDetail(@Path('id') int id);

  //=================L·ªöP CH·ª¶ NHI·ªÜM==================

  //API L·∫§Y DANH S√ÅCH L·ªöP CH·ª¶ NHI·ªÜM
  @Get(path: '/lop-chu-nhiem')
  Future<Response<Map<String, dynamic>>> getLopList();

  //API L·∫§Y DANH S√ÅCH SINH VI√äN L·ªöP CH·ª¶ NHI·ªÜM THEO IDL·ªöP
  @Get(path: '/lop-chu-nhiem/sinhvien/{id}')
  Future<Response<Map<String, dynamic>>> getStudentsByClassId(
    @Path('id') int lopId,
  );

  //API L·∫§Y DANH S√ÅCH T·∫§T C·∫¢ SINH VI√äN
  @Get(path: '/students')
  Future<Response<Map<String, dynamic>>> getAllSinhViens();

  //API L·∫§Y DANH S√ÅCH L·ªöP H·ªåC
  @Get(path: "/lopsinhvien")
  Future<Response> getDanhSachLop();

  //API L·∫§Y DANH S√ÅCH SINH VI√äN THEO L·ªöP
  @Get(path: '/lopsinhvien/{id}')
  Future<Response<Map<String, dynamic>>> getLopChiTiet(@Path('id') int lopId);

  //API ƒê·ªîI CH·ª®C V·ª§ TH∆Ø K√ù CHO SINH VI√äN
  @POST(path: '/lopsinhvien/{sinhVien}/chucvu')
  Future<Response<Map<String, dynamic>>> doiChucVu(
    @Path('sinhVien') int sinhVienId,
    @Body() Map<String, dynamic> data,
  );

  //API L·∫§Y DANH S√ÅCH NI√äN KH√ìA-H·ªåC K·ª≤
  @Get(path: '/nien-khoa')
  Future<Response<Map<String, dynamic>>> fetchNienKhoaHocKy();

  //API L·∫§Y DANH S√ÅCH T·∫§T C·∫¢ GI·∫¢NG VI√äN
  @Get(path: '/giangvien')
  Future<Response> getAllUsers();

  //API L·∫§Y ƒêI·ªÇM R√àN LUY·ªÜN THEO ID LOP V√Ä TH·ªúI GIAN
  @Get(path: '/lop-chu-nhiem/nhap-diem-rl/{id}')
  Future<Response> fetchDiemRenLuyen(
    @Path('id') int idLop,
    @Query('thoi_gian') int thoiGian,
    @Query('nam') int nam,
  );
  //API C·∫¨P NH·∫¨T ƒêI·ªÇM R√àN LUY·ªÜN CHO L·ªöP
  @Post(path: '/lop/cap-nhat-diem-checked') // ‚úÖ
  @FormUrlEncoded()
  Future<Response> updateBulkDiemRenLuyen({
    @Field("selected_students") required String selectedStudents,
    @Field("thoi_gian") required String thoiGian,
    @Field("xep_loai") required String xepLoai,
    @Field("nam") required String nam,
  });

  //API L·∫§Y DANH S√ÅCH NG√ÄNH H·ªåC, KHOA
  @Get(path: '/nganh-hoc')
  Future<Response> getDanhSachNganhHoc();

  //API L·∫§Y DANH S√ÅCH B·ªò M√îN
  @Get(path: '/bo-mon')
  Future<Response> getDanhSachBoMon();

  //API L·∫§Y DANH S√ÅCH vai tr√≤
  @Get(path: '/roles')
  Future<Response> getDanhSachVaiTro();

  //=================GI·∫§Y X√ÅC NH·∫¨N====================
  //API L·∫§Y DANH S√ÅCH GI·∫§Y X√ÅC NH·∫¨N
  @Get(path: '/giay-xac-nhan')
  Future<Response> getDanhSachGiayXacNhan();

  // PUT: X√°c nh·∫≠n h√†ng lo·∫°t gi·∫•y x√°c nh·∫≠n
  @Put(path: '/giay-xac-nhan')
  Future<Response> confirmMultipleGiayXacNhan(
    @Body() Map<String, dynamic> body,
  );

  //==============L·ªöP H·ªåC PH·∫¶N=====================

  //L·∫§Y DANH S√ÅCH TO√ÄN B·ªò L·ªöP H·ªåC PH·∫¶N
  @Get(path: '/lop-hoc-phan')
  Future<Response<Map<String, dynamic>>> getALLLopHocPhanList();
  @Get(path: '/lop-hoc-phan/giang-vien')
  Future<Response<Map<String, dynamic>>> getLopHocPhanTheoGiangVienList();

  //L·∫§Y DANH S√ÅCH L·ªöP H·ªåC PH·∫¶N C·ª¶A GV HI·ªÜN T·∫†I
  @Get(path: '/diem-mon-hoc')
  Future<Response<Map<String, dynamic>>> getLopHocPhanList();

  // L·∫§Y DANH S√ÅCH SINH VI√äN TRONG L·ªöP H·ªåC PH·∫¶N K√àM ƒêI·ªÇM
  @Get(path: '/diem-mon-hoc/{id}')
  Future<Response<Map<String, dynamic>>> getDanhSachSinhVienLopHocPhan(
    @Path('id') int idLopHocPhan,
  );
  //L·∫§Y DANH S√ÅCH L·ªöP H·ªåC PH·∫¶N THEO GI·∫¢NG VI√äN
  @POST(path: '/lop-hoc-phan/phan-cong-giang-vien/{lopHocPhan}')
  Future<Response<Map<String, dynamic>>> phanCongGiangVien(
    @Path('lopHocPhan') int lopHocPhanId,
    @Body() Map<String, dynamic> body,
  );

  // ‚úÖ N·ªòP B·∫¢NG ƒêI·ªÇM (UPDATE TR·∫†NG TH√ÅI)
  @Post(path: '/diem-mon-hoc/nop-bang-diem/{lopHocPhan}')
  Future<Response<Map<String, dynamic>>> updateTrangThaiNopDiem(
    @Path('lopHocPhan') int idLopHocPhan,
  );

  // API C·∫¨P NH·∫¨T ƒêI·ªÇM M√îN H·ªåC CHO L·ªöP H·ªåC PH·∫¶N
  @Post(path: '/diem-mon-hoc/cap-nhat')
  Future<Response<Map<String, dynamic>>> capNhatDiemMonHoc(
    @Body() Map<String, dynamic> body,
  );
  // ================== üîî TH√îNG B√ÅO ==================

  @Get(path: '/thongbao')
  Future<Response<Map<String, dynamic>>> getThongBaoList();

  @Get(path: '/thongbao/{id}')
  Future<Response<Map<String, dynamic>>> getThongBaoDetail(@Path('id') int id);

  @Delete(path: '/thongbao/file/{id}')
  Future<Response> deleteFileInThongBao(@Path('id') int id);

  @Post(path: '/thongbao')
  @multipart
  Future<Response<Map<String, dynamic>>> createThongBaoWithFiles(
    @Part('tieu_de') String tieuDe,
    @Part('noi_dung') String noiDung,
    @Part('tu_ai') String tuAi,
    @Part('ngay_gui') String ngayGui,
    @Part('files[]') List<MultipartFile> files,
  );
  @Post(path: '/thongbao/{id}?_method=PUT')
  @multipart
  Future<Response<Map<String, dynamic>>> updateThongBaoWithFiles(
    @Path('id') int id,
    @Part('tieu_de') String title,
    @Part('noi_dung') String content,
    @Part('ngay_gui') String ngayGui,
    @Part('tu_ai') String tuAi,
    @Part('trang_thai') int trangThai,
    @Part('files[]') List<MultipartFile> files,
    @Part('old_files') String oldFilesJson,
  );

  // Xo√° th√¥ng b√°o
  @Delete(path: '/thongbao/{id}')
  Future<Response> deleteThongBao(@Path('id') int id);

  // G·ª≠i th√¥ng b√°o t·ªõi sinh vi√™n (theo danh s√°ch l·ªõp)
  @Post(path: '/thongbao/send-to-student/{id}')
  Future<Response<Map<String, dynamic>>> sendThongBaoToStudents(
    @Path('id') int id,
    @Body() Map<String, dynamic> body,
  );

  // L·∫•y danh s√°ch gi√° tr·ªã enum c·∫•p tr√™n
  @Get(path: '/thongbao/get-data-cap-tren')
  Future<Response<Map<String, dynamic>>> getCapTrenOptions();
  // G·ª≠i b√¨nh lu·∫≠n m·ªõi cho th√¥ng b√°o
  @Post(path: '/thongbao/binh-luan/{id}')
  Future<Response<Map<String, dynamic>>> createComment(
    @Path('id') int thongBaoId,
    @Body() Map<String, dynamic> body,
  );

  // Xo√° b√¨nh lu·∫≠n
  @Delete(path: '/thongbao/binh-luan/{id}')
  Future<Response> deleteComment(@Path('id') int commentId);
  //===========PHI·∫æU L√äN L·ªöP==============
  @Post(path: '/phieu-len-lop/store')
  Future<Response> storePhieuLenLop(@Body() Map<String, dynamic> body);

  @Get(path: '/phieu-len-lop/all')
  Future<Response> getPhieuLenLopAll();

  // =================== BI√äN B·∫¢N SHCN ===================

  // L·∫•y danh s√°ch bi√™n b·∫£n theo l·ªõp
  @Get(path: '/bienbanshcn/{lop}')
  Future<Response> getBienBanListByLop(@Path('lop') int lopId);

  // L·∫•y th√¥ng tin ƒë·ªÉ t·∫°o bi√™n b·∫£n m·ªõi
  @Get(path: '/bienbanshcn/create/{lop}')
  Future<Response> getBienBanCreateInfo(@Path('lop') int lopId);

  // T·∫°o bi√™n b·∫£n m·ªõi
  @Post(path: '/bienbanshcn/store/{lop}')
  Future<Response> createBienBan(
    @Path('lop') int lopId,
    @Body() Map<String, dynamic> data,
  );

  // L·∫•y chi ti·∫øt 1 bi√™n b·∫£n SHCN
  @Get(path: '/bienbanshcn/chitiet/{bienBanSHCN}')
  Future<Response> getBienBanDetail(@Path('bienBanSHCN') int bienBanId);

  // C·∫≠p nh·∫≠t bi√™n b·∫£n
  @Put(path: '/bienbanshcn/{bienBanSHCN}')
  Future<Response> updateBienBan(
    @Path('bienBanSHCN') int bienBanId,
    @Body() Map<String, dynamic> data,
  );

  // L·∫•y th√¥ng tin ƒë·ªÉ s·ª≠a bi√™n b·∫£n
  @Get(path: '/bienbanshcn/{bienBanSHCN}/edit')
  Future<Response> getBienBanEditInfo(@Path('bienBanSHCN') int bienBanId);

  // Xo√° bi√™n b·∫£n
  @Delete(path: '/bienbanshcn/{bienBanSHCN}')
  Future<Response> deleteBienBan(@Path('bienBanSHCN') int bienBanId);

  // X√°c nh·∫≠n bi√™n b·∫£n
  @Post(path: '/bienbanshcn/confirm/{bienBanSHCN}')
  Future<Response> confirmBienBan(@Path('bienBanSHCN') int bienBanId);

  // Xo√° sinh vi√™n v·∫Øng m·∫∑t kh·ªèi bi√™n b·∫£n
  @Delete(path: '/bienbanshcn/sinhvienvang/{id}')
  Future<Response> deleteSinhVienVang(@Path('id') int chiTietId);

  //DANH S√ÅCH TU·∫¶N
  @Get(path: '/danhsach-tuan')
  Future<Response<Map<String, dynamic>>> getDanhSachTuan(
    @Query('nam_bat_dau') int namBatDau,
  );
  //KH·ªûI T·∫†O TU·∫¶N
  @Post(path: '/khoi-tao-tuan')
  @FormUrlEncoded()
  Future<Response> khoiTaoTuan(@Field('date') String date);
  //L·∫§Y DANH S√ÅCH CH∆Ø∆†NG TR√åNH ƒê√ÄO T·∫†O
  @Get(path: '/ctdt')
  Future<Response> getCTDT();

  // ================== TH·ªúI KH√ìA BI·ªÇU ==================

  //DANH S√ÅCH TKB
  @Get(path: '/thoi-khoa-bieu')
  Future<Response<dynamic>> getDanhSachThoiKhoaBieu();

  //T·∫†O TH·ªúI KH√ìA BI√äU
  @Post(path: '/thoi-khoa-bieu')
  Future<Response<Map<String, dynamic>>> createThoiKhoaBieu(
    @Body() Map<String, dynamic> body,
  );

  //C·∫¨P NH·∫¨T TH·ªúI KH√ìA BI·ªÇU
  @Post(path: '/thoi-khoa-bieu/{tkb}')
  Future<Response<Map<String, dynamic>>> updateThoiKhoaBieu(
    @Path('tkb') int tkbId,
    @Body() Map<String, dynamic> body,
  );

  //X√ìA TH·ªúI KH√ìA BI·ªÇU
  @Delete(path: '/thoi-khoa-bieu/xoa-thoi-khoa-bieu/{tkb}')
  Future<Response> deleteThoiKhoaBieu(@Path('tkb') int tkbId);

  // //COPY TH·ªúI KH√ìA BI·ªÇU
  // @Post(path: '/thoi-khoa-bieu/copy-tuan/{tkb}')
  // Future<Response> copyThoiKhoaBieuWeek(
  //   @Path('tkb') int tkbId,
  //   @Body() Map<String, dynamic> body,
  // );
  // COPY NHI·ªÄU TH·ªúI KH√ìA BI·ªÇU SANG NHI·ªÄU TU·∫¶N
  @Post(path: '/thoi-khoa-bieu/copy-nhieu-tuan')
  Future<Response> copyNhieuThoiKhoaBieuWeek(@Body() Map<String, dynamic> body);

  //===================== L·ªäCH THI =========================

  // L·∫•y danh s√°ch l·ªãch thi
  @Get(path: '/lich-thi/danh-sach-lich-thi')
  Future<Response<Map<String, dynamic>>> fetchLichThi();

  // T·∫°o m·ªõi l·ªãch thi
  @Post(path: '/lich-thi/tao-lich-thi')
  Future<Response<Map<String, dynamic>>> createLichThi(
    @Body() Map<String, dynamic> body,
  );

  // C·∫≠p nh·∫≠t l·ªãch thi
  @Post(path: '/lich-thi/cap-nhat-lich-thi/{lichThi}')
  Future<Response<Map<String, dynamic>>> updateLichThi(
    @Path('lichThi') int lichThiId,
    @Body() Map<String, dynamic> body,
  );

  // X√≥a l·ªãch thi
  @Delete(path: '/lich-thi/xoa-lich-thi/{lichThi}')
  Future<Response> deleteLichThi(@Path('lichThi') int lichThiId);
}
